{"title":"c++  stl","uid":"de220b48c36880e94f5eb744b982c625","slug":"cppstl","date":"2022-04-23T12:27:30.000Z","updated":"2022-06-03T16:26:15.477Z","comments":true,"path":"api/articles/cppstl.json","keywords":null,"cover":"/img/cover/cppstl.png","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h1><h2 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h2><ul>\n<li><p>template demo</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nT <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大大减少了代码量, 不必为了多种数据类型创建相似的函数, 模板函数可以自动推导实参类型, 但是模板类能推导, 所以创建模板类实例需要指定T.</p></blockquote>\n</li>\n</ul>\n<h2 id=\"iterator\"><a href=\"#iterator\" class=\"headerlink\" title=\"iterator\"></a>iterator</h2><p>行为类似指针, 通过它能遍历容器</p>\n<p><img src=\"/img/vectoriterator%E7%A4%BA%E4%BE%8B.png\" alt=\"vector中iterator示例\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>vec.end()未定义, 所以不能访问.</p></blockquote>\n<h2 id=\"algorithms\"><a href=\"#algorithms\" class=\"headerlink\" title=\"algorithms\"></a>algorithms</h2><p>并不直接作用在容器上, 而是为iterator服务.</p>\n<h2 id=\"containers\"><a href=\"#containers\" class=\"headerlink\" title=\"containers\"></a>containers</h2><ul>\n<li>Sequence containers<ul>\n<li>vector </li>\n<li>deque</li>\n<li>list</li>\n<li>forward list</li>\n<li>array</li>\n</ul>\n</li>\n<li>Associative containers<ul>\n<li>set, multiset</li>\n<li>map, multimap</li>\n</ul>\n</li>\n<li>Unordered containers<ul>\n<li>Unordered set/multiset</li>\n<li>Unordered map/multimap</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sequence-container\"><a href=\"#sequence-container\" class=\"headerlink\" title=\"sequence container\"></a>sequence container</h3><ul>\n<li>vec[idx]无范围检查/vec.at(idx)有范围检查, 抛出range_error</li>\n</ul>\n<h4 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//anything else</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//anything else</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">)</span> <span class=\"token comment\">//c++ 11</span>\n    <span class=\"token comment\">//anything else</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"common-member-functions\"><a href=\"#common-member-functions\" class=\"headerlink\" title=\"common member functions\"></a>common member functions</h4><ul>\n<li>empty: 判空</li>\n<li>size</li>\n<li>clear: 清空</li>\n<li>swap:  交换内容物</li>\n<li>insert</li>\n<li>erase</li>\n</ul>\n<h4 id=\"vector特性\"><a href=\"#vector特性\" class=\"headerlink\" title=\"vector特性\"></a>vector特性</h4><ul>\n<li>头插慢</li>\n<li>search慢</li>\n</ul>\n<h4 id=\"Deque特性\"><a href=\"#Deque特性\" class=\"headerlink\" title=\"Deque特性\"></a>Deque特性</h4><ul>\n<li>中间插入满</li>\n<li>search慢</li>\n</ul>\n<h4 id=\"list特性\"><a href=\"#list特性\" class=\"headerlink\" title=\"list特性\"></a>list特性</h4><ul>\n<li>插入快</li>\n<li>不能随机访问</li>\n<li>search慢</li>\n</ul>\n<h1 id=\"待更新\"><a href=\"#待更新\" class=\"headerlink\" title=\"待更新\"></a>待更新</h1>","feature":true,"text":" STLtemplate template demo template&lt;typename T> T square(T x)&#123; return x * x; &#125; 大大减少了代码量, 不必为了多种数据类型创建相似的函数, 模板函数可以自动推导实参类型, 但是模...","link":"","photos":[],"count_time":{"symbolsCount":859,"symbolsTime":"1 mins."},"categories":[{"name":"cpp","slug":"cpp","count":1,"path":"api/categories/cpp.json"}],"tags":[{"name":"stl","slug":"stl","count":1,"path":"api/tags/stl.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#STL\"><span class=\"toc-text\">STL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#template\"><span class=\"toc-text\">template</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#iterator\"><span class=\"toc-text\">iterator</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#algorithms\"><span class=\"toc-text\">algorithms</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#containers\"><span class=\"toc-text\">containers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sequence-container\"><span class=\"toc-text\">sequence container</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#common-member-functions\"><span class=\"toc-text\">common member functions</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vector%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">vector特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Deque%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Deque特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#list%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">list特性</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BE%85%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">待更新</span></a></li></ol>","author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c语言可变参数","uid":"891368c40364640d375bd2bab3f27dc8","slug":"c语言可变参数","date":"2022-05-29T10:12:50.000Z","updated":"2022-05-29T10:38:15.285Z","comments":true,"path":"api/articles/c语言可变参数.json","keywords":null,"cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.eqV6_Q73ibrBxnlTkLLpJAAAAA","text":" c语言可变参数在定义一个函数的时候, 有些时候不能确定会有几个参数, 譬如printf这个函数, c语言中我们可以利用一系列宏来实现可变参数 原理利用最后一个确定参数的位置找到下一个可变参数的位置, 这里涉及到内存对齐的问题. c中利用宏_INTSIZEOF完成内存对齐操作. ...","link":"","photos":[],"count_time":{"symbolsCount":492,"symbolsTime":"1 mins."},"categories":[{"name":"c","slug":"c","count":2,"path":"api/categories/c.json"}],"tags":[{"name":"可变参数","slug":"可变参数","count":1,"path":"api/tags/可变参数.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"ip分类和子网掩码","uid":"1597a415ca82328d83779c59436ff1ef","slug":"ip分类和子网掩码","date":"2022-03-13T11:45:04.000Z","updated":"2022-06-03T16:27:03.716Z","comments":true,"path":"api/articles/ip分类和子网掩码.json","keywords":null,"cover":"/img/cover/learning.png","text":" ip分类和子网掩码1. ip地址结构IP地址由32位二进制串构成, 人为的划分成4段并转化为十进制, 方便记忆书写, 如192.168.0.1 2. ip地址分类传统的方式是分为A/B/C/D/E, 例如对C类IP地址, 以110开头, 后21位为网络号, 剩余部分可以分配为主...","link":"","photos":[],"count_time":{"symbolsCount":443,"symbolsTime":"1 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"ip","slug":"ip","count":1,"path":"api/tags/ip.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}