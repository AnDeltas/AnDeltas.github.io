{"title":"socket详解","uid":"3cb78585ebc1a97e25cb5e965d62b8b6","slug":"socket详解","date":"2022-02-09T12:57:41.000Z","updated":"2022-06-03T16:24:14.437Z","comments":true,"path":"api/articles/socket详解.json","keywords":null,"cover":"/img/cover/socket.png","content":"<h2 id=\"socket是什么\"><a href=\"#socket是什么\" class=\"headerlink\" title=\"socket是什么?\"></a>socket是什么?</h2><p>当我们在编辑器中写下如下代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">with</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dataSocket<span class=\"token punctuation\">:</span>\n\tdataSocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IP<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># AF_INET代表socket讲采用ipv4进行通信</span>\n    <span class=\"token comment\"># SOCK_STREAM代表采用TCP协议(流式), 如果是UDP协议, 就写成SOCK_DGRAM(数据报)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打下断点查看dataSocket对象的结构, 会得到如下结果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;socket.socket fd&#x3D;1276, family&#x3D;AddressFamily.AF_INET, type&#x3D;SocketKind.SOCK_STREAM, proto&#x3D;0, laddr&#x3D;(&#39;127.0.0.1&#39;, 50000), raddr&#x3D;(&#39;127.0.0.1&#39;, 20867)&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>其中fd就是<a href=\"https://www.computerhope.com/jargon/f/file-descriptor.htm\">file descriptor</a></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A <strong>file descriptor</strong> is a number that uniquely identifies an open <a href=\"https://www.computerhope.com/jargon/f/file.htm\">file</a> in a computer’s <a href=\"https://www.computerhope.com/jargon/o/os.htm\">operating system</a>. It describes a data resource, and how that resource may be accessed.</p>\n<p>When a program asks to open a file — or another data resource, like a <strong><a href=\"https://www.computerhope.com/jargon/n/network-socket.htm\">network socket</a></strong> — the <a href=\"https://www.computerhope.com/jargon/k/kernel.htm\">kernel</a>:</p>\n<ol>\n<li>Grants access.</li>\n<li>Creates an entry in the global file table.</li>\n<li>Provides the software with the location of that entry.</li>\n</ol>\n<p>The descriptor is identified by a unique non-negative <a href=\"https://www.computerhope.com/jargon/i/integer.htm\">integer</a>, such as 0, 12, or 567. At least one file descriptor exists for every open file on the system.</p>\n<p>File descriptors were first used in <a href=\"https://www.computerhope.com/jargon/u/unix.htm\">Unix</a>, and are used by modern operating systems including <a href=\"https://www.computerhope.com/jargon/l/linux.htm\">Linux</a>, <a href=\"https://www.computerhope.com/jargon/m/macosx.htm\">macOS</a>, and <a href=\"https://www.computerhope.com/jargon/b/bsd.htm\">BSD</a>. In <a href=\"https://www.computerhope.com/jargon/w/windows.htm\">Microsoft Windows</a>, file descriptors are known as <a href=\"https://www.computerhope.com/jargon/f/filehand.htm\">file handles</a>.</p>\n<p>When a <a href=\"https://www.computerhope.com/jargon/p/process.htm\">process</a> makes a successful request to open a file, the kernel <a href=\"https://www.computerhope.com/jargon/r/return.htm\">returns</a> a file descriptor which points to an entry in the kernel’s global file table. The file table entry contains information such as the <a href=\"https://www.computerhope.com/jargon/i/inode.htm\">inode</a> of the file, byte <a href=\"https://www.computerhope.com/jargon/o/offset.htm\">offset</a>, and the access restrictions for that <a href=\"https://www.computerhope.com/jargon/d/datastre.htm\">data stream</a> (<a href=\"https://www.computerhope.com/jargon/r/readonly.htm\">read-only</a>, write-only, etc.).</p>\n<p><img src=\"https://gitee.com/developer_27/picgo/raw/master/image-20220209222505124.png\" alt=\"image-20220209222505124\"></p></blockquote>\n<ul>\n<li>family则指定了socket所采用的地址类型</li>\n<li>type则说明了socket是采用的协议(TCP/UDP)</li>\n<li>proto也就是protocal也是说明协议类型</li>\n<li>laddr和raddr分别指明了本机和对方主机的IP和端口号</li>\n</ul>\n<p>以上就是socket在python语言中的表现形式, 在不同的编程语言中, socket的实现细节可能有所不同, 但大体形式基本一致. 通过socket, 操作系统向网卡最终能读取到的RAM中写入要传输的信息(除了原始报文外, 要加上一系列控制信息譬如目标的IP和端口号), 并通过网卡推送出去.</p>\n<h2 id=\"socket的功能\"><a href=\"#socket的功能\" class=\"headerlink\" title=\"socket的功能\"></a>socket的功能</h2><p>作为传输层向应用层提供服务的接口,不同主机上的进程可以利用socket实现信息上的交流, socket为一系列应用层协议的实现提供了支持. 利用socket, 我们用类似操作文件的方式进行不同主机不同应用进程之间的数据交互, 向下层传递应用层报文. </p>\n<h2 id=\"python中socket常用方法\"><a href=\"#python中socket常用方法\" class=\"headerlink\" title=\"python中socket常用方法\"></a>python中socket常用方法</h2><ul>\n<li>bind: 绑定端口</li>\n<li>listen: 监听端口</li>\n<li>recev: 接受信息</li>\n<li>accept: 接受一个连接请求(在此之前有listen)</li>\n<li>send: 发送信息</li>\n<li>connect: 请求连接</li>\n<li>close: 关闭socket(python中通常用with管理socket)</li>\n</ul>\n","text":"socket是什么?当我们在编辑器中写下如下代码 from socket import * with socket(AF_INET, SOCK_STREAM) as dataSocket: dataSocket.connect((IP, PORT)) # AF_INET代表soc...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#socket%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">socket是什么?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#socket%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">socket的功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python%E4%B8%ADsocket%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">python中socket常用方法</span></a></li></ol>","author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ip分类和子网掩码","uid":"1597a415ca82328d83779c59436ff1ef","slug":"ip分类和子网掩码","date":"2022-03-13T11:45:04.000Z","updated":"2022-06-03T16:27:03.716Z","comments":true,"path":"api/articles/ip分类和子网掩码.json","keywords":null,"cover":"/img/cover/learning.png","text":" ip分类和子网掩码1. ip地址结构IP地址由32位二进制串构成, 人为的划分成4段并转化为十进制, 方便记忆书写, 如192.168.0.1 2. ip地址分类传统的方式是分为A/B/C/D/E, 例如对C类IP地址, 以110开头, 后21位为网络号, 剩余部分可以分配为主...","link":"","photos":[],"count_time":{"symbolsCount":443,"symbolsTime":"1 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"ip","slug":"ip","count":1,"path":"api/tags/ip.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"socket编程python示例","uid":"cf34b485e52bf362f60976953dc6221e","slug":"socket编程python示例","date":"2022-02-07T13:41:18.000Z","updated":"2022-06-03T16:23:49.770Z","comments":true,"path":"api/articles/socket编程python示例.json","keywords":null,"cover":"/img/cover/python.png","text":" socket编程python示例socket定义socket 是应用层与传输层交互的接口, 本质上讲是一个整数, 从操作系统角度来说是表示两个不同主机上应用进程的关系(IP:Port). socket可以分为TCP socket和UDP socket两种, 前者提供可靠的服务,...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":1,"path":"api/categories/python.json"}],"tags":[{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}