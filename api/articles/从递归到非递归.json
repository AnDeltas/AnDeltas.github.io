{"title":"从递归到非递归","uid":"a7aec79676dfc3a912f876c98e4616cf","slug":"从递归到非递归","date":"2022-06-06T03:10:38.000Z","updated":"2022-06-06T03:33:10.004Z","comments":true,"path":"api/articles/从递归到非递归.json","keywords":null,"cover":"/img/cover/recursive.png","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"从递归到非递归\"><a href=\"#从递归到非递归\" class=\"headerlink\" title=\"从递归到非递归\"></a>从递归到非递归</h1><h2 id=\"运行时栈\"><a href=\"#运行时栈\" class=\"headerlink\" title=\"运行时栈\"></a>运行时栈</h2><p><a href=\"https://www.bilibili.com/video/BV1544y177yw\">可以点击这里看一个视频</a></p>\n<h2 id=\"fibonacci数列示例-栈帧模拟\"><a href=\"#fibonacci数列示例-栈帧模拟\" class=\"headerlink\" title=\"fibonacci数列示例:栈帧模拟\"></a>fibonacci数列示例:栈帧模拟</h2><p>首先我们需要明确一点, 在使用栈模拟运行时栈时, 我们需要站在汇编语言的角度思考问题, 函数运行过程中产生的临时变量等不能再忽略掉, 需要明确为一条语句.就如下例中的变量<code>t1, t2</code>.好的代码不言自明, 可以看代码了.</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Frame</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> pc<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> rv<span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//pc指示当前栈帧运行到了哪一步</span>\n<span class=\"token punctuation\">&#125;</span> Frame<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一个栈帧, 由于是递归调用, 栈帧的大小就是确定的.</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">call</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>pc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">goto</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> f<span class=\"token operator\">-></span>pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ret</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">fibs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Frame stk<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>top <span class=\"token operator\">=</span> stk <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//模拟rax寄存器, 保存函数返回值</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Frame <span class=\"token operator\">*</span>f<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> top<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> stk<span class=\"token punctuation\">;</span> f<span class=\"token operator\">-></span>pc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//在switch中, 每一个case相当于对应的递归函数中的一行.</span>\n        <span class=\"token comment\">//但需要注意的是, 临时变量需要显式的表示出来.</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span>pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> f<span class=\"token operator\">-></span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    f<span class=\"token operator\">-></span>rv <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">goto</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                f<span class=\"token operator\">-></span>t1 <span class=\"token operator\">=</span> rax<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n                f<span class=\"token operator\">-></span>t2 <span class=\"token operator\">=</span> rax<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span>rv <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> f<span class=\"token operator\">-></span>rv <span class=\"token operator\">=</span> f<span class=\"token operator\">-></span>t1 <span class=\"token operator\">+</span> f<span class=\"token operator\">-></span>t2<span class=\"token punctuation\">;</span>\n                rax <span class=\"token operator\">=</span> f<span class=\"token operator\">-></span>rv<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//由于在递归函数中有两种返回方式, 所以这里需要判断一下是哪一种</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> rax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":" 从递归到非递归运行时栈可以点击这里看一个视频 fibonacci数列示例:栈帧模拟首先我们需要明确一点, 在使用栈模拟运行时栈时, 我们需要站在汇编语言的角度思考问题, 函数运行过程中产生的临时变量等不能再忽略掉, 需要明确为一条语句.就如下例中的变量t1, t2.好的代码不言...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"c","slug":"c","count":2,"path":"api/categories/c.json"}],"tags":[{"name":"递归","slug":"递归","count":1,"path":"api/tags/递归.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E9%9D%9E%E9%80%92%E5%BD%92\"><span class=\"toc-text\">从递归到非递归</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88\"><span class=\"toc-text\">运行时栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fibonacci%E6%95%B0%E5%88%97%E7%A4%BA%E4%BE%8B-%E6%A0%88%E5%B8%A7%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">fibonacci数列示例:栈帧模拟</span></a></li></ol></li></ol>","author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"c语言可变参数","uid":"891368c40364640d375bd2bab3f27dc8","slug":"c语言可变参数","date":"2022-05-29T10:12:50.000Z","updated":"2022-05-29T10:38:15.285Z","comments":true,"path":"api/articles/c语言可变参数.json","keywords":null,"cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.eqV6_Q73ibrBxnlTkLLpJAAAAA","text":" c语言可变参数在定义一个函数的时候, 有些时候不能确定会有几个参数, 譬如printf这个函数, c语言中我们可以利用一系列宏来实现可变参数 原理利用最后一个确定参数的位置找到下一个可变参数的位置, 这里涉及到内存对齐的问题. c中利用宏_INTSIZEOF完成内存对齐操作. ...","link":"","photos":[],"count_time":{"symbolsCount":492,"symbolsTime":"1 mins."},"categories":[{"name":"c","slug":"c","count":2,"path":"api/categories/c.json"}],"tags":[{"name":"可变参数","slug":"可变参数","count":1,"path":"api/tags/可变参数.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}