{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"c语言可变参数","uid":"891368c40364640d375bd2bab3f27dc8","slug":"c语言可变参数","date":"2022-05-29T10:12:50.000Z","updated":"2022-05-29T10:38:15.285Z","comments":true,"path":"api/articles/c语言可变参数.json","keywords":null,"cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.eqV6_Q73ibrBxnlTkLLpJAAAAA","text":" c语言可变参数在定义一个函数的时候, 有些时候不能确定会有几个参数, 譬如printf这个函数, c语言中我们可以利用一系列宏来实现可变参数 原理利用最后一个确定参数的位置找到下一个可变参数的位置, 这里涉及到内存对齐的问题. c中利用宏_INTSIZEOF完成内存对齐操作. ...","link":"","photos":[],"count_time":{"symbolsCount":492,"symbolsTime":"1 mins."},"categories":[{"name":"c","slug":"c","count":1,"path":"api/categories/c.json"}],"tags":[{"name":"可变参数","slug":"可变参数","count":1,"path":"api/tags/可变参数.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"c++  stl","uid":"de220b48c36880e94f5eb744b982c625","slug":"cppstl","date":"2022-04-23T12:27:30.000Z","updated":"2022-06-03T16:26:15.477Z","comments":true,"path":"api/articles/cppstl.json","keywords":null,"cover":"/img/cover/cppstl.png","text":" STLtemplate template demo template&lt;typename T> T square(T x)&#123; return x * x; &#125; 大大减少了代码量, 不必为了多种数据类型创建相似的函数, 模板函数可以自动推导实参类型, 但是模...","link":"","photos":[],"count_time":{"symbolsCount":859,"symbolsTime":"1 mins."},"categories":[{"name":"cpp","slug":"cpp","count":1,"path":"api/categories/cpp.json"}],"tags":[{"name":"stl","slug":"stl","count":1,"path":"api/tags/stl.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"ip分类和子网掩码","uid":"1597a415ca82328d83779c59436ff1ef","slug":"ip分类和子网掩码","date":"2022-03-13T11:45:04.000Z","updated":"2022-06-03T16:27:03.716Z","comments":true,"path":"api/articles/ip分类和子网掩码.json","keywords":null,"cover":"/img/cover/learning.png","text":" ip分类和子网掩码1. ip地址结构IP地址由32位二进制串构成, 人为的划分成4段并转化为十进制, 方便记忆书写, 如192.168.0.1 2. ip地址分类传统的方式是分为A/B/C/D/E, 例如对C类IP地址, 以110开头, 后21位为网络号, 剩余部分可以分配为主...","link":"","photos":[],"count_time":{"symbolsCount":443,"symbolsTime":"1 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"ip","slug":"ip","count":1,"path":"api/tags/ip.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"socket详解","uid":"3cb78585ebc1a97e25cb5e965d62b8b6","slug":"socket详解","date":"2022-02-09T12:57:41.000Z","updated":"2022-06-03T16:24:14.437Z","comments":true,"path":"api/articles/socket详解.json","keywords":null,"cover":"/img/cover/socket.png","text":"socket是什么?当我们在编辑器中写下如下代码 from socket import * with socket(AF_INET, SOCK_STREAM) as dataSocket: dataSocket.connect((IP, PORT)) # AF_INET代表soc...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"socket编程python示例","uid":"cf34b485e52bf362f60976953dc6221e","slug":"socket编程python示例","date":"2022-02-07T13:41:18.000Z","updated":"2022-06-03T16:23:49.770Z","comments":true,"path":"api/articles/socket编程python示例.json","keywords":null,"cover":"/img/cover/python.png","text":" socket编程python示例socket定义socket 是应用层与传输层交互的接口, 本质上讲是一个整数, 从操作系统角度来说是表示两个不同主机上应用进程的关系(IP:Port). socket可以分为TCP socket和UDP socket两种, 前者提供可靠的服务,...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":1,"path":"api/categories/python.json"}],"tags":[{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"为typora配置picgo图床","uid":"47eae1e4716d0028cdae517170b1e6a4","slug":"为typora配置picgo图床","date":"2022-02-07T11:41:22.000Z","updated":"2022-06-03T16:24:36.901Z","comments":true,"path":"api/articles/为typora配置picgo图床.json","keywords":null,"cover":"/img/cover/typorapicgo.png","text":" 下载picgo, 安装gitee-uploader插件(需要node和gitee) 配置typora, 验证是否上传成功 ","link":"","photos":[],"count_time":{"symbolsCount":69,"symbolsTime":"1 mins."},"categories":[{"name":"鼓捣","slug":"鼓捣","count":2,"path":"api/categories/鼓捣.json"}],"tags":[{"name":"markdown","slug":"markdown","count":1,"path":"api/tags/markdown.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"我正在看或者看过的书/课程","uid":"56058150d2bcbe6ceb19c55c69837c03","slug":"lectures","date":"2022-02-07T10:19:01.000Z","updated":"2022-06-03T16:25:18.746Z","comments":true,"path":"api/articles/lectures.json","keywords":null,"cover":"/img/cover/learning.png","text":" 计算机基础中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程 编程语言【C语言】翁恺C语言程序编程全系列 黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难 人工智能《PyTorch深度学习实践》完...","link":"","photos":[],"count_time":{"symbolsCount":167,"symbolsTime":"1 mins."},"categories":[{"name":"学习资料","slug":"学习资料","count":1,"path":"api/categories/学习资料.json"}],"tags":[{"name":"推荐","slug":"推荐","count":1,"path":"api/tags/推荐.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"利用Hexo搭建个人博客","uid":"bc63bc65f17b60fc9f8b331c18e4940c","slug":"hexo博客搭建","date":"2022-02-07T04:00:00.000Z","updated":"2022-06-03T16:25:42.754Z","comments":true,"path":"api/articles/hexo博客搭建.json","keywords":null,"cover":"/img/cover/hexo.png","text":" 步骤 在Node.js (nodejs.org)下载安装包并按默认设置安装 建立github仓库, 仓库名位username.github.io, username必须与github账户名相同 安装hexo cnpm install -g hexo-cli 创建博客根目录(任意...","link":"","photos":[],"count_time":{"symbolsCount":893,"symbolsTime":"1 mins."},"categories":[{"name":"鼓捣","slug":"鼓捣","count":2,"path":"api/categories/鼓捣.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"CYR","slug":"blog-author","avatar":"/static/img/avatar.jpg","link":"/","description":"一个学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":6,"tags":8,"word_count":"7.5k","post_count":8}